// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/message/send": {
            "post": {
                "description": "splits the message and sends segments to the channel layer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "message"
                ],
                "summary": "Send message",
                "parameters": [
                    {
                        "description": "Message",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.responseOk"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.responseError"
                        }
                    }
                }
            }
        },
        "/segment/put": {
            "post": {
                "description": "puts a message segment in the queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "segment"
                ],
                "summary": "Put a segment in the queue",
                "parameters": [
                    {
                        "description": "Segment",
                        "name": "segment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Segment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.responseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "hello!"
                },
                "time": {
                    "type": "integer",
                    "example": 1711902448
                },
                "username": {
                    "type": "string",
                    "example": "user-2024"
                }
            }
        },
        "entity.Segment": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "num": {
                    "type": "integer",
                    "example": 4
                },
                "size": {
                    "type": "integer",
                    "example": 15
                },
                "time": {
                    "type": "integer",
                    "example": 1711902448
                }
            }
        },
        "http.responseError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "auth"
                },
                "message": {
                    "type": "string",
                    "example": "the authorization token has not been transferred"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "http.responseOk": {
            "type": "object",
            "properties": {
                "body": {},
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "pinspire.site:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server chat server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
